{"ast":null,"code":"import axios from \"axios\";\nimport { actionTypes } from \"./constants\";\nimport { api } from \"../constants/constantsApi\";\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.FETCH_ARTISTS\n    });\n    axios.get(\"\".concat(api.rootUrl, \"?method=artist.getsimilar&artist=AC/DC&api_key=\").concat(api.apiKey, \"&format=json&limit=10\")).then(response => {\n      const artists = response.data.similarartists.artist;\n      const artistInfo = [];\n      artists.forEach(artist => {\n        axios.get(\"\".concat(api.rootUrl, \"?method=artist.getinfo&artist=\").concat(artist.name, \"&api_key=\").concat(api.apiKey, \"&format=json&limit=10\")).then(res => {\n          artistInfo.push(res.data);\n\n          if (artistInfo.length > 9) {\n            dispatch({\n              type: actionTypes.FETCH_ARTISTS_FULFILLED,\n              payload: artistInfo\n            });\n          }\n        }).catch(err => {\n          dispatch({\n            type: actionTypes.FETCH_ARTISTS_ERROR,\n            payload: err.message\n          });\n        });\n      });\n    });\n  };\n};\nexport const loadMoreAlbums = payload => {\n  return {\n    type: actionTypes.SET_SEARCH_VAL,\n    payload\n  };\n};\nexport const albumSearch = (val, albumList) => {\n  return dispatch => {\n    const filtredList = albumList.filter(album => album.name.toLowerCase().includes(val.toLowerCase()));\n    dispatch({\n      type: actionTypes.ALBUM_SEARCH,\n      payload: filtredList\n    });\n  };\n};\nexport const fetchAlbums = (name, pageNum) => {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.FETCH_ALBUMS\n    });\n    const albumsInfo = [];\n    axios.get(\"\".concat(api.rootUrl, \"?method=artist.gettopalbums&artist=\").concat(name, \"&api_key=\").concat(api.apiKey, \"&format=json&page=\").concat(pageNum, \"&limit=10\")).then(res => {\n      const albums = res.data.topalbums.album;\n      albums.forEach(album => {\n        axios.get(\"\".concat(api.rootUrl, \"?method=album.getinfo&api_key=\").concat(api.apiKey, \"&artist=\").concat(name, \"&album=\").concat(album.name, \"&format=json&limit=10\")).then(res => {\n          albumsInfo.push(res.data.album);\n\n          if (albumsInfo.length > 9) {\n            dispatch({\n              type: actionTypes.FETCH_ALBUMS_FULFILLED,\n              payload: [albumsInfo, name]\n            });\n          }\n        }).catch(err => {\n          dispatch({\n            type: actionTypes.FETCH_ALBUMS_ERROR,\n            payload: err.message\n          });\n        });\n      });\n    }).catch(err => {\n      dispatch({\n        type: actionTypes.FETCH_ALBUMS_ERROR,\n        payload: err.message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/macbook/Desktop/rock/Rock_App/src/redux/actions.js"],"names":["axios","actionTypes","api","fetchData","dispatch","type","FETCH_ARTISTS","get","rootUrl","apiKey","then","response","artists","data","similarartists","artist","artistInfo","forEach","name","res","push","length","FETCH_ARTISTS_FULFILLED","payload","catch","err","FETCH_ARTISTS_ERROR","message","loadMoreAlbums","SET_SEARCH_VAL","albumSearch","val","albumList","filtredList","filter","album","toLowerCase","includes","ALBUM_SEARCH","fetchAlbums","pageNum","FETCH_ALBUMS","albumsInfo","albums","topalbums","FETCH_ALBUMS_FULFILLED","FETCH_ALBUMS_ERROR"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport { actionTypes } from \"./constants\";\nimport { api } from \"../constants/constantsApi\";\n\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch({ type: actionTypes.FETCH_ARTISTS });\n    axios\n      .get(\n        `${api.rootUrl}?method=artist.getsimilar&artist=AC/DC&api_key=${api.apiKey}&format=json&limit=10`\n      )\n      .then(response => {\n        const artists = response.data.similarartists.artist;\n        const artistInfo = [];\n        artists.forEach(artist => {\n          axios\n            .get(\n              `${api.rootUrl}?method=artist.getinfo&artist=${artist.name}&api_key=${api.apiKey}&format=json&limit=10`\n            )\n            .then(res => {\n              artistInfo.push(res.data);\n              if (artistInfo.length > 9) {\n                dispatch({\n                  type: actionTypes.FETCH_ARTISTS_FULFILLED,\n                  payload: artistInfo\n                });\n              }\n            })\n            .catch(err => {\n              dispatch({\n                type: actionTypes.FETCH_ARTISTS_ERROR,\n                payload: err.message\n              });\n            });\n        });\n      });\n  };\n};\nexport const loadMoreAlbums = payload => {\n  return { type: actionTypes.SET_SEARCH_VAL, payload };\n};\n\nexport const albumSearch = (val, albumList) => {\n  return dispatch => {\n    const filtredList = albumList.filter(album =>\n      album.name.toLowerCase().includes(val.toLowerCase())\n    );\n    dispatch({\n      type: actionTypes.ALBUM_SEARCH,\n      payload: filtredList\n    });\n  };\n};\n\nexport const fetchAlbums = (name, pageNum) => {\n  return dispatch => {\n    dispatch({ type: actionTypes.FETCH_ALBUMS });\n    const albumsInfo = [];\n    axios\n      .get(\n        `${api.rootUrl}?method=artist.gettopalbums&artist=${name}&api_key=${api.apiKey}&format=json&page=${pageNum}&limit=10`\n      )\n      .then(res => {\n        const albums = res.data.topalbums.album;\n        albums.forEach(album => {\n          axios\n            .get(\n              `${api.rootUrl}?method=album.getinfo&api_key=${api.apiKey}&artist=${name}&album=${album.name}&format=json&limit=10`\n            )\n            .then(res => {\n              albumsInfo.push(res.data.album);\n              if (albumsInfo.length > 9) {\n                dispatch({\n                  type: actionTypes.FETCH_ALBUMS_FULFILLED,\n                  payload: [albumsInfo, name]\n                });\n              }\n            })\n            .catch(err => {\n              dispatch({\n                type: actionTypes.FETCH_ALBUMS_ERROR,\n                payload: err.message\n              });\n            });\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: actionTypes.FETCH_ALBUMS_ERROR,\n          payload: err.message\n        });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}